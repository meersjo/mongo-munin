#!/usr/bin/env python

## GENERATED FILE - DO NOT EDIT

#%# family=auto
#%# capabilities=autoconf

import urllib2
import sys
import os

try:
    import json
except ImportError:
    import simplejson as json

host = os.environ.get('HOST', '127.0.0.1')
port = os.environ.get('PORT', 28017)

def getServerRequest(action):
    url = "http://%s:%s/%s" % (host, port, action)
    req = urllib2.Request(url)
    raw = urllib2.urlopen(req).read()
    return json.loads( raw )

def getServerStatus():
    return getServerRequest('_status')['serverStatus']

def doAutoConf():
    try:
        raw = urllib2.urlopen( "http://%s:%d/_status" % (host, port) ).read()
        print "yes"
        return True
    except urllib2.URLError as detail:
        print "no (", detail, ")"
        return False

names = [ "locked_read", "locked_write", "acquiring_read", "acquiring_write" ]

def getSubKeyValue(dataDict, dbName, recordName, mode):
    return int(dataDict[dbName][recordName].get(mode).get('$numberLong', 0)) if type(dataDict[dbName][recordName].get(mode)) == dict else dataDict[dbName][recordName].get(mode, 0)

def doData():
    data = getServerStatus()['locks']
    totals = { 'locked': { 'read': 0, 'write': 0 }, 'acquiring': { 'read': 0, 'write': 0 } }

    for key in data:
      totals['locked']['read'] += getSubKeyValue(data, key, 'timeLockedMicros', 'r')
      totals['locked']['write'] += getSubKeyValue(data, key, 'timeLockedMicros', 'w')
      totals['acquiring']['read'] += getSubKeyValue(data, key, 'timeAcquiringMicros', 'r')
      totals['acquiring']['write'] += getSubKeyValue(data, key, 'timeAcquiringMicros', 'w')

    print names[0] + ".value " + str( totals['locked']['read'] )
    print names[1] + ".value " + str( totals['locked']['write'] )
    print names[2] + ".value " + str( totals['acquiring']['read'] )
    print names[3] + ".value " + str( totals['acquiring']['write'] )

def doConfig():
    print "graph_title MongoDB write lock percentage"
    print "graph_args --base 1000 -l 0 "
    print "graph_vlabel percentage"
    print "graph_category MongoDB"

    for name in names:
      print name + ".label " + name
      print name + ".type DERIVE"
      print name + ".cdef " + name + ",10000.0,/"

if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1] == "autoconf":
        doAutoConf()
    elif len(sys.argv) > 1 and sys.argv[1] == "config":
        doConfig()
    else:
        doData()
